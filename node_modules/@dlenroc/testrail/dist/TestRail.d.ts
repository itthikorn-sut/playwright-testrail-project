import { Readable } from 'stream';

type TestRailCtx = {
    readonly baseURL?: string;
    readonly username?: string;
    readonly password?: string;
    readonly signal?: AbortSignal;
    readonly implementations?: {
        readonly AbortController?: any;
        readonly Blob?: any;
        readonly fetch?: any;
        readonly FormData?: any;
    };
};

declare class TestRailException extends Error {
    constructor(message: string);
}

type AddAttachment = Blob | Readable | {
    name: string;
    value: string | Blob | Readable;
};

interface AddCase extends Record<string, unknown> {
    title?: string;
    template_id?: number;
    type_id?: number;
    priority_id?: number;
    estimate?: string;
    milestone_id?: number;
    refs?: string;
}

interface AddCaseField extends Record<string, unknown> {
    type?: string;
    name?: string;
    label?: string;
    description?: string;
    include_all?: boolean;
    template_ids?: number[];
    configs?: AddCaseField.CaseFieldConfig[];
}
declare namespace AddCaseField {
    interface CaseFieldConfig extends Record<string, unknown> {
        context?: Context;
        options?: Options;
    }
    interface Context extends Record<string, unknown> {
        is_global?: boolean;
        project_ids?: number[];
    }
    interface Options extends Record<string, unknown> {
        default_value?: string;
        format?: string;
        has_actual?: boolean;
        has_expected?: boolean;
        is_required?: boolean;
        items?: string;
        rows?: string;
    }
}

interface AddConfigGroup extends Record<string, unknown> {
    name?: string;
}

type AddConfig = AddConfigGroup;

interface AddDataset extends Record<string, unknown> {
    id?: string;
    name?: number;
    variables?: AddDataset.Variable[];
}
declare namespace AddDataset {
    interface Variable extends Record<string, unknown> {
        id?: number;
        name?: string;
        variable?: string;
    }
}

interface AddGroup extends Record<string, unknown> {
    name?: string;
    user_ids?: number[];
}

interface AddMilestone extends Record<string, unknown> {
    name?: string;
    description?: string;
    due_on?: number;
    parent_id?: number;
    refs?: string;
    start_on?: number;
}

interface AddRunToPlanEntry extends Record<string, unknown> {
    config_ids?: number[];
    description?: string;
    assignedto_id?: number;
    include_all?: boolean;
    case_ids?: number[];
    refs?: string;
}

interface AddPlanEntry extends Record<string, unknown> {
    suite_id?: number;
    name?: string;
    description?: string;
    assignedto_id?: number;
    include_all?: boolean;
    case_ids?: number[];
    config_ids?: number[];
    refs?: string;
    runs?: AddRunToPlanEntry[];
}

interface UpdatePlan extends Record<string, unknown> {
    name?: string;
    description?: string;
    milestone_id?: number;
}

interface AddPlan extends UpdatePlan {
    entries?: AddPlanEntry[];
}

interface AddProject extends Record<string, unknown> {
    name?: string;
    announcement?: string;
    show_announcement?: boolean;
    suite_mode?: number;
}

interface AddResult extends Record<string, unknown> {
    status_id?: number;
    comment?: string;
    version?: string;
    elapsed?: string;
    defects?: string;
    assignedto_id?: number;
}

interface AddResultForCase extends AddResult {
    case_id?: number;
}

interface AddResultForTest extends AddResult {
    test_id?: number;
}

interface AddResults extends Record<string, unknown> {
    results?: AddResultForTest[];
}

interface AddResultsForCases extends Record<string, unknown> {
    results?: AddResultForCase[];
}

interface UpdateRun extends Record<string, unknown> {
    name?: string;
    description?: string;
    milestone_id?: number;
    include_all?: boolean;
    case_ids?: number[];
    refs?: string;
}

interface AddRun extends UpdateRun {
    suite_id?: number;
    assignedto_id?: number;
}

interface UpdateSection extends Record<string, unknown> {
    description?: string;
    name?: string;
}

interface AddSection extends UpdateSection {
    parent_id?: number;
    suite_id?: number;
}

interface AddSharedStep extends Record<string, unknown> {
    title?: string;
    custom_steps_separated?: {
        content?: string;
        expected?: string;
        additional_info?: string;
        refs?: string;
    }[];
}

interface AddSuite extends Record<string, unknown> {
    name?: string;
    description?: string;
}

interface AddUser extends Record<string, unknown> {
    assigned_projects?: number[];
    email?: string;
    email_notifications?: boolean;
    is_admin?: boolean;
    group_ids?: number[];
    mfa_required?: boolean;
    name: string;
    role_id: number;
    sso_enabled: boolean;
}

interface AddVariable extends Record<string, unknown> {
    id?: string;
    name?: number;
}

interface Pagination extends Record<string, unknown> {
    limit?: number;
    offset?: number;
}

interface CaseFilters extends Pagination, Record<string, unknown> {
    suite_id?: number;
    created_after?: number;
    created_before?: number;
    created_by?: number | number[];
    filter?: string;
    milestone_id?: number | number[];
    priority_id?: number | number[];
    refs?: string;
    section_id?: number;
    template_id?: number | number[];
    type_id?: number | number[];
    updated_after?: number;
    updated_before?: number;
    updated_by?: number | number[];
}

interface CopyCasesToSection extends Record<string, unknown> {
    case_ids?: number[];
}

interface DeleteCases extends Record<string, unknown> {
    case_ids?: number[];
}

interface DeleteSharedStep extends Record<string, unknown> {
    keep_in_cases: boolean;
}

interface MilestoneFilters extends Pagination, Record<string, unknown> {
    is_completed?: boolean;
    is_started?: boolean;
}

interface MoveCasesToSection extends Record<string, unknown> {
    case_ids?: number[];
}

interface MoveSection extends Record<string, unknown> {
    parent_id?: number;
    after_id?: number;
}

interface PlanFilters extends Pagination, Record<string, unknown> {
    created_after?: number;
    created_before?: number;
    created_by?: number | number[];
    is_completed?: boolean;
    milestone_id?: number | number[];
}

interface ProjectFilters extends Pagination, Record<string, unknown> {
    is_completed?: boolean;
}

interface ResultFilters extends Pagination, Record<string, unknown> {
    defects?: string;
    status_id?: number | number[];
}

interface ResultForRunFilters extends Pagination, Record<string, unknown> {
    created_after?: number;
    created_before?: number;
    created_by?: number | number[];
    defects?: string;
    status_id?: number | number[];
}

interface RunFilters extends Pagination, Record<string, unknown> {
    created_after?: number;
    created_before?: number;
    created_by?: number | number[];
    is_completed?: boolean;
    milestone_id?: number | number[];
    refs?: string;
    suite_id?: number | number[];
}

interface SectionFilters extends Pagination, Record<string, unknown> {
    suite_id?: number;
}

interface SharedStepFilters extends Pagination, Record<string, unknown> {
    created_after?: number;
    created_before?: number;
    created_by?: number | number[];
    updated_after?: number;
    updated_before?: number;
    refs?: string;
}

interface TestFilters extends Pagination, Record<string, unknown> {
    status_id?: number | number[];
}

interface UpdateCase extends AddCase {
    section_id?: number;
}

interface UpdateCases extends UpdateCase {
    case_ids?: number[];
}

type UpdateConfig = AddConfigGroup;

type UpdateConfigGroup = AddConfigGroup;

interface UpdateMilestone extends AddMilestone {
    is_completed?: boolean;
    is_started?: boolean;
}

interface UpdatePlanEntry extends Record<string, unknown> {
    name?: string;
    description?: string;
    assignedto_id?: number;
    include_all?: boolean;
    case_ids?: number[];
    refs?: string;
}

type UpdateProject = AddProject;

interface UpdateRunInPlanEntry extends Record<string, unknown> {
    description?: string;
    assignedto_id?: number;
    include_all?: boolean;
    case_ids?: number[];
    refs?: string;
}

type UpdateSharedStep = AddSharedStep;

type UpdateSuite = AddSuite;

interface UserFilters extends Record<string, unknown> {
    project_id?: number;
}

type index$1_AddAttachment = AddAttachment;
type index$1_AddCase = AddCase;
type index$1_AddCaseField = AddCaseField;
type index$1_AddConfig = AddConfig;
type index$1_AddConfigGroup = AddConfigGroup;
type index$1_AddDataset = AddDataset;
type index$1_AddGroup = AddGroup;
type index$1_AddMilestone = AddMilestone;
type index$1_AddPlan = AddPlan;
type index$1_AddPlanEntry = AddPlanEntry;
type index$1_AddProject = AddProject;
type index$1_AddResult = AddResult;
type index$1_AddResultForCase = AddResultForCase;
type index$1_AddResultForTest = AddResultForTest;
type index$1_AddResults = AddResults;
type index$1_AddResultsForCases = AddResultsForCases;
type index$1_AddRun = AddRun;
type index$1_AddRunToPlanEntry = AddRunToPlanEntry;
type index$1_AddSection = AddSection;
type index$1_AddSharedStep = AddSharedStep;
type index$1_AddSuite = AddSuite;
type index$1_AddUser = AddUser;
type index$1_AddVariable = AddVariable;
type index$1_CaseFilters = CaseFilters;
type index$1_CopyCasesToSection = CopyCasesToSection;
type index$1_DeleteCases = DeleteCases;
type index$1_DeleteSharedStep = DeleteSharedStep;
type index$1_MilestoneFilters = MilestoneFilters;
type index$1_MoveCasesToSection = MoveCasesToSection;
type index$1_MoveSection = MoveSection;
type index$1_Pagination = Pagination;
type index$1_PlanFilters = PlanFilters;
type index$1_ProjectFilters = ProjectFilters;
type index$1_ResultFilters = ResultFilters;
type index$1_ResultForRunFilters = ResultForRunFilters;
type index$1_RunFilters = RunFilters;
type index$1_SectionFilters = SectionFilters;
type index$1_SharedStepFilters = SharedStepFilters;
type index$1_TestFilters = TestFilters;
type index$1_UpdateCase = UpdateCase;
type index$1_UpdateCases = UpdateCases;
type index$1_UpdateConfig = UpdateConfig;
type index$1_UpdateConfigGroup = UpdateConfigGroup;
type index$1_UpdateMilestone = UpdateMilestone;
type index$1_UpdatePlan = UpdatePlan;
type index$1_UpdatePlanEntry = UpdatePlanEntry;
type index$1_UpdateProject = UpdateProject;
type index$1_UpdateRun = UpdateRun;
type index$1_UpdateRunInPlanEntry = UpdateRunInPlanEntry;
type index$1_UpdateSection = UpdateSection;
type index$1_UpdateSharedStep = UpdateSharedStep;
type index$1_UpdateSuite = UpdateSuite;
type index$1_UserFilters = UserFilters;
declare namespace index$1 {
  export {
    index$1_AddAttachment as AddAttachment,
    index$1_AddCase as AddCase,
    index$1_AddCaseField as AddCaseField,
    index$1_AddConfig as AddConfig,
    index$1_AddConfigGroup as AddConfigGroup,
    index$1_AddDataset as AddDataset,
    index$1_AddGroup as AddGroup,
    index$1_AddMilestone as AddMilestone,
    index$1_AddPlan as AddPlan,
    index$1_AddPlanEntry as AddPlanEntry,
    index$1_AddProject as AddProject,
    index$1_AddResult as AddResult,
    index$1_AddResultForCase as AddResultForCase,
    index$1_AddResultForTest as AddResultForTest,
    index$1_AddResults as AddResults,
    index$1_AddResultsForCases as AddResultsForCases,
    index$1_AddRun as AddRun,
    index$1_AddRunToPlanEntry as AddRunToPlanEntry,
    index$1_AddSection as AddSection,
    index$1_AddSharedStep as AddSharedStep,
    index$1_AddSuite as AddSuite,
    index$1_AddUser as AddUser,
    index$1_AddVariable as AddVariable,
    index$1_CaseFilters as CaseFilters,
    index$1_CopyCasesToSection as CopyCasesToSection,
    index$1_DeleteCases as DeleteCases,
    index$1_DeleteSharedStep as DeleteSharedStep,
    index$1_MilestoneFilters as MilestoneFilters,
    index$1_MoveCasesToSection as MoveCasesToSection,
    index$1_MoveSection as MoveSection,
    index$1_Pagination as Pagination,
    index$1_PlanFilters as PlanFilters,
    index$1_ProjectFilters as ProjectFilters,
    index$1_ResultFilters as ResultFilters,
    index$1_ResultForRunFilters as ResultForRunFilters,
    index$1_RunFilters as RunFilters,
    index$1_SectionFilters as SectionFilters,
    index$1_SharedStepFilters as SharedStepFilters,
    index$1_TestFilters as TestFilters,
    index$1_UpdateCase as UpdateCase,
    index$1_UpdateCases as UpdateCases,
    index$1_UpdateConfig as UpdateConfig,
    index$1_UpdateConfigGroup as UpdateConfigGroup,
    index$1_UpdateMilestone as UpdateMilestone,
    index$1_UpdatePlan as UpdatePlan,
    index$1_UpdatePlanEntry as UpdatePlanEntry,
    index$1_UpdateProject as UpdateProject,
    index$1_UpdateRun as UpdateRun,
    index$1_UpdateRunInPlanEntry as UpdateRunInPlanEntry,
    index$1_UpdateSection as UpdateSection,
    index$1_UpdateSharedStep as UpdateSharedStep,
    index$1_UpdateSuite as UpdateSuite,
    index$1_UserFilters as UserFilters,
  };
}

interface Attachment extends Record<string, unknown> {
    client_id: number;
    created_on: number;
    data_id: string;
    entity_id: string;
    entity_type: string;
    filename: string;
    filetype: string;
    icon: string;
    id: string;
    is_image: boolean;
    legacy_id: number;
    name: string;
    project_id: number;
    size: number;
    user_id: number;
}

interface AttachmentForCase extends Attachment {
    entity_type: 'case';
}

interface AttachmentForPlan extends Attachment {
    entity_type: 'plan';
    plan_id: number;
}

interface AttachmentForPlanEntry extends Attachment {
    entity_type: 'entry';
    plan_entry_id: string;
    plan_id: number;
}

interface AttachmentForRun extends Attachment {
    entity_type: 'run';
    run_id: number;
}

interface AttachmentForTest extends Attachment {
    entity_type: 'test_change';
}

interface Case extends Record<string, unknown> {
    created_by: number;
    created_on: number;
    display_order: number;
    estimate_forecast?: string;
    estimate?: string;
    id: number;
    is_deleted: number;
    milestone_id?: number;
    priority_id: number;
    refs?: string;
    section_id: number;
    suite_id: number;
    template_id: number;
    title: string;
    type_id: number;
    updated_by: number;
    updated_on: number;
}

interface Context extends Record<string, unknown> {
    is_global: boolean;
    project_ids?: number[];
}

interface CaseField extends Record<string, unknown> {
    configs: CaseField.CaseFieldConfig[];
    description?: string;
    display_order: number;
    id: number;
    include_all: boolean;
    is_active: boolean;
    label: string;
    name: string;
    system_name: string;
    template_ids: number[];
    type_id: number;
}
declare namespace CaseField {
    interface CaseFieldConfig extends Record<string, unknown> {
        context: Context;
        id: string;
        options: Options;
    }
    interface Options {
        default_value?: string;
        format?: string;
        has_actual?: boolean;
        has_expected?: boolean;
        is_required: boolean;
        items?: string;
        rows?: string;
    }
}

interface Option extends Record<string, unknown> {
    default_value?: string;
    format?: string;
    has_actual?: boolean;
    has_expected?: boolean;
    is_required: boolean;
    items?: string;
    rows?: string;
}

interface CaseHistory extends Record<string, unknown> {
    changes: CaseHistory.Change[];
    created_on: number;
    id?: number;
    type_id: number;
    user_id: number;
}
declare namespace CaseHistory {
    interface Change extends Record<string, unknown> {
        field: string;
        label?: string;
        new_text?: string;
        new_value?: string | number | number[];
        old_ignore?: boolean;
        old_text?: string;
        old_value?: string | number | number[];
        options?: Option;
        type_id: number;
    }
}

interface CaseStatus extends Record<string, unknown> {
    id: number;
    name: string;
    abbreviation: string;
    is_default: boolean;
    is_approved: boolean;
}

interface CaseType extends Record<string, unknown> {
    id: number;
    is_default: boolean;
    name: string;
}

interface ConfigItem extends Record<string, unknown> {
    group_id: number;
    id: number;
    name: string;
}

interface Config extends Record<string, unknown> {
    configs: ConfigItem[];
    id: number;
    name: string;
    project_id: number;
}

interface CreatedAttachment extends Record<string, unknown> {
    attachment_id: string;
}

interface Variable extends Record<string, unknown> {
    id: number;
    name: string;
}

interface Dataset extends Record<string, unknown> {
    id: number;
    name: string;
    variables: ({
        value: string;
    } & Variable)[];
}

interface FieldConfig extends Record<string, unknown> {
    context: Context;
    id: string;
    options: Option;
}

interface Group extends Record<string, unknown> {
    id: number;
    name: string;
    user_ids: number[];
}

interface Milestone extends Record<string, unknown> {
    completed_on?: number;
    description?: string;
    due_on?: number;
    id: number;
    is_completed: boolean;
    is_started: boolean;
    milestones?: Milestone[];
    name: string;
    parent_id?: number;
    project_id: number;
    refs?: string;
    start_on?: number;
    started_on?: number;
    url: string;
}

interface PlanEntryRun extends Record<string, unknown> {
    assignedto_id?: number;
    blocked_count: number;
    completed_on?: number;
    config?: string;
    config_ids: number[];
    created_by: number;
    created_on: number;
    custom_status1_count: number;
    custom_status2_count: number;
    custom_status3_count: number;
    custom_status4_count: number;
    custom_status5_count: number;
    custom_status6_count: number;
    custom_status7_count: number;
    description?: string;
    entry_id: string;
    entry_index: number;
    failed_count: number;
    id: number;
    include_all: boolean;
    is_completed: boolean;
    milestone_id?: number;
    name: string;
    passed_count: number;
    plan_id: number;
    project_id: number;
    refs?: string;
    retest_count: number;
    suite_id: number;
    untested_count: number;
    url: string;
}

interface PlanEntry extends Record<string, unknown> {
    description?: string;
    id: string;
    include_all: boolean;
    name: string;
    refs?: string;
    runs: PlanEntryRun[];
    suite_id: number;
}

interface Plan extends Record<string, unknown> {
    assignedto_id?: number;
    blocked_count: number;
    completed_on?: number;
    created_by: number;
    created_on: number;
    custom_status1_count: number;
    custom_status2_count: number;
    custom_status3_count: number;
    custom_status4_count: number;
    custom_status5_count: number;
    custom_status6_count: number;
    custom_status7_count: number;
    description?: string;
    entries: PlanEntry[];
    failed_count: number;
    id: number;
    is_completed: boolean;
    milestone_id?: number;
    name: string;
    passed_count: number;
    project_id: number;
    retest_count: number;
    untested_count: number;
    url: string;
}

interface PlanItem extends Record<string, unknown> {
    assignedto_id?: number;
    blocked_count: number;
    completed_on?: number;
    created_by: number;
    created_on: number;
    custom_status1_count: number;
    custom_status2_count: number;
    custom_status3_count: number;
    custom_status4_count: number;
    custom_status5_count: number;
    custom_status6_count: number;
    custom_status7_count: number;
    description?: string;
    failed_count: number;
    id: number;
    is_completed: boolean;
    milestone_id?: number;
    name: string;
    passed_count: number;
    project_id: number;
    retest_count: number;
    untested_count: number;
    url: string;
}

interface Priority extends Record<string, unknown> {
    id: number;
    is_default: boolean;
    name: string;
    priority: number;
    short_name: string;
}

interface Project extends Record<string, unknown> {
    announcement?: string;
    completed_on?: number;
    default_role_id?: number;
    id: number;
    is_completed: boolean;
    name: string;
    show_announcement: boolean;
    suite_mode: number;
    url: string;
    groups: {
        id: number;
        role: string;
        role_id: number;
    }[];
    users: {
        id: number;
        global_role_id: number;
        global_role: string;
        project_role_id: number;
        project_role: string;
    }[];
}

type Columns = {
    [id: string]: number;
};
interface Report extends Record<string, unknown> {
    activities_daterange?: string;
    activities_daterange_from?: string;
    activities_daterange_to?: string;
    activities_include?: boolean;
    activities_limit?: number;
    activities_statuses_ids?: number[];
    activities_statuses_include?: string;
    cases_columns: Columns;
    cases_filters?: string;
    cases_groupby?: string;
    cases_include_comparison?: boolean;
    cases_include_coverage?: boolean;
    cases_include_details?: boolean;
    cases_include_new?: boolean;
    cases_include_norefs?: boolean;
    cases_include_refs?: boolean;
    cases_include_summary?: boolean;
    cases_include_updated?: boolean;
    cases_limit?: number;
    changes_daterange?: string;
    changes_daterange_from?: string;
    changes_daterange_to?: string;
    content_hide_links: boolean;
    defects_ids?: string;
    defects_include?: string;
    description?: string;
    history_daterange?: string;
    history_daterange_from?: string;
    history_daterange_to?: string;
    history_include?: boolean;
    history_limit?: number;
    id: number;
    milestones_active_include?: boolean;
    milestones_completed_include?: boolean;
    milestones_completed_limit?: number;
    milestones_id?: number;
    name: string;
    notify_attachment: string;
    notify_attachment_html_format: boolean;
    notify_attachment_pdf_format: boolean;
    notify_attachment_recipients: string;
    notify_link: boolean;
    notify_link_recipients?: string;
    notify_user: boolean;
    plans_id?: number;
    progress_include?: boolean;
    references_ids?: string;
    references_include?: string;
    results_include?: string;
    runs_active_include?: boolean;
    runs_completed_include?: boolean;
    runs_completed_limit?: number;
    runs_filters?: {
        [id: string]: any;
    };
    runs_ids?: number[];
    runs_include?: string;
    runs_limit?: number;
    runs_sections_ids?: number[];
    runs_sections_include?: string;
    runs_suites_id?: string;
    runs_suites_ids?: string;
    runs_suites_include?: string;
    sections_ids?: string;
    sections_include?: string;
    status_include?: boolean;
    statuses_ids?: number[];
    statuses_include?: string;
    suites_ids?: string;
    suites_include?: string;
    tests_columns?: {
        [id: string]: number;
    };
    tests_filters?: string;
    tests_groupby?: string;
    tests_include?: boolean;
    tests_include_details?: boolean;
    tests_include_summary?: string;
    tests_limit?: number;
}

interface ReportUrls extends Record<string, unknown> {
    report_html: string;
    report_pdf: string;
    report_url: string;
}

interface Result extends Record<string, unknown> {
    assignedto_id?: number;
    attachment_ids: number[];
    comment?: string;
    created_by: number;
    created_on: number;
    defects?: string;
    elapsed?: string;
    id: number;
    status_id?: number;
    test_id: number;
    version?: string;
}

interface ResultField extends Record<string, unknown> {
    configs: FieldConfig[];
    description?: string;
    display_order: number;
    id: number;
    include_all: boolean;
    is_active: boolean;
    label: string;
    name: string;
    system_name: string;
    template_ids: number[];
    type_id: number;
}

interface Role extends Record<string, unknown> {
    id: number;
    name: string;
    is_default: boolean;
    is_project_admin: boolean;
}

interface Run extends Record<string, unknown> {
    assignedto_id?: number;
    blocked_count: number;
    completed_on?: number;
    config?: string;
    config_ids: number[];
    created_by: number;
    created_on: number;
    updated_on: number;
    custom_status1_count: number;
    custom_status2_count: number;
    custom_status3_count: number;
    custom_status4_count: number;
    custom_status5_count: number;
    custom_status6_count: number;
    custom_status7_count: number;
    description?: string;
    failed_count: number;
    id: number;
    include_all: boolean;
    is_completed: boolean;
    milestone_id?: number;
    name: string;
    passed_count: number;
    plan_id?: number;
    project_id: number;
    refs?: string;
    retest_count: number;
    suite_id: number;
    untested_count: number;
    url: string;
}

interface Section extends Record<string, unknown> {
    depth: number;
    description?: string;
    display_order: number;
    id: number;
    name: string;
    parent_id?: number;
    suite_id: number;
}

interface SharedStep extends Record<string, unknown> {
    case_ids: number[];
    created_by: number;
    created_on: number;
    custom_steps_separated: {
        content?: string;
        expected?: string;
        additional_info?: string;
        refs?: string;
    }[];
    id: number;
    project_id: number;
    title: string;
    updated_by: number;
    updated_on: number;
}

interface SharedStepHistory extends Record<string, unknown> {
    custom_steps_separated: SharedStep['custom_steps_separated'];
    id: number;
    timestamp: number;
    title: string;
    user_id: number;
}

interface Status extends Record<string, unknown> {
    color_bright: number;
    color_dark: number;
    color_medium: number;
    id: number;
    is_final: boolean;
    is_system: boolean;
    is_untested: boolean;
    label: string;
    name: string;
}

interface Suite extends Record<string, unknown> {
    completed_on?: number;
    description?: string;
    id: number;
    is_baseline: boolean;
    is_completed: boolean;
    is_master: boolean;
    name: string;
    project_id: number;
    url: string;
}

interface Template extends Record<string, unknown> {
    id: number;
    is_default: boolean;
    name: string;
}

interface Test extends Record<string, unknown> {
    assignedto_id?: number;
    case_id: number;
    estimate?: string;
    estimate_forecast?: string;
    id: number;
    milestone_id?: number;
    priority_id: number;
    refs?: string;
    run_id: number;
    status_id: number;
    template_id: number;
    title: string;
    type_id: number;
    cases_display_order: number;
    sections_display_order: number;
}

interface User extends Record<string, unknown> {
    assigned_projects: number[];
    email: string;
    email_notifications: boolean;
    id: number;
    is_active: boolean;
    is_admin: boolean;
    name: string;
    role: string;
    role_id: number;
    group_ids: number[];
    mfa_required: boolean;
    sso_enabled: boolean;
}

type index_Attachment = Attachment;
type index_AttachmentForCase = AttachmentForCase;
type index_AttachmentForPlan = AttachmentForPlan;
type index_AttachmentForPlanEntry = AttachmentForPlanEntry;
type index_AttachmentForRun = AttachmentForRun;
type index_AttachmentForTest = AttachmentForTest;
type index_Case = Case;
type index_CaseField = CaseField;
type index_CaseHistory = CaseHistory;
type index_CaseStatus = CaseStatus;
type index_CaseType = CaseType;
type index_Config = Config;
type index_ConfigItem = ConfigItem;
type index_Context = Context;
type index_CreatedAttachment = CreatedAttachment;
type index_Dataset = Dataset;
type index_FieldConfig = FieldConfig;
type index_Group = Group;
type index_Milestone = Milestone;
type index_Option = Option;
type index_Plan = Plan;
type index_PlanEntry = PlanEntry;
type index_PlanEntryRun = PlanEntryRun;
type index_PlanItem = PlanItem;
type index_Priority = Priority;
type index_Project = Project;
type index_Report = Report;
type index_ReportUrls = ReportUrls;
type index_Result = Result;
type index_ResultField = ResultField;
type index_Role = Role;
type index_Run = Run;
type index_Section = Section;
type index_SharedStep = SharedStep;
type index_SharedStepHistory = SharedStepHistory;
type index_Status = Status;
type index_Suite = Suite;
type index_Template = Template;
type index_Test = Test;
type index_User = User;
type index_Variable = Variable;
declare namespace index {
  export {
    index_Attachment as Attachment,
    index_AttachmentForCase as AttachmentForCase,
    index_AttachmentForPlan as AttachmentForPlan,
    index_AttachmentForPlanEntry as AttachmentForPlanEntry,
    index_AttachmentForRun as AttachmentForRun,
    index_AttachmentForTest as AttachmentForTest,
    index_Case as Case,
    index_CaseField as CaseField,
    index_CaseHistory as CaseHistory,
    index_CaseStatus as CaseStatus,
    index_CaseType as CaseType,
    index_Config as Config,
    index_ConfigItem as ConfigItem,
    index_Context as Context,
    index_CreatedAttachment as CreatedAttachment,
    index_Dataset as Dataset,
    index_FieldConfig as FieldConfig,
    index_Group as Group,
    index_Milestone as Milestone,
    index_Option as Option,
    index_Plan as Plan,
    index_PlanEntry as PlanEntry,
    index_PlanEntryRun as PlanEntryRun,
    index_PlanItem as PlanItem,
    index_Priority as Priority,
    index_Project as Project,
    index_Report as Report,
    index_ReportUrls as ReportUrls,
    index_Result as Result,
    index_ResultField as ResultField,
    index_Role as Role,
    index_Run as Run,
    index_Section as Section,
    index_SharedStep as SharedStep,
    index_SharedStepHistory as SharedStepHistory,
    index_Status as Status,
    index_Suite as Suite,
    index_Template as Template,
    index_Test as Test,
    index_User as User,
    index_Variable as Variable,
  };
}

type Signal = {
    signal: AbortSignal;
};
declare class TestRail {
    static Exception: typeof TestRailException;
    private readonly ctx;
    constructor(config?: {
        host: string;
        username: string;
        password: string;
    } & Pick<TestRailCtx, 'signal' | 'implementations'>);
    addAttachmentToCase(caseId: number, payload: AddAttachment, options?: Signal): Promise<CreatedAttachment>;
    addAttachmentToPlan(planId: number, payload: AddAttachment, options?: Signal): Promise<CreatedAttachment>;
    addAttachmentToPlanEntry(planId: number, entryId: string, payload: AddAttachment, options?: Signal): Promise<CreatedAttachment>;
    addAttachmentToResult(resultId: number, payload: AddAttachment, options?: Signal): Promise<CreatedAttachment>;
    addAttachmentToRun(runId: number, payload: AddAttachment, options?: Signal): Promise<CreatedAttachment>;
    getAttachmentsForCase(caseId: number, filters?: Pagination, options?: Signal): Promise<AttachmentForCase[]>;
    getAttachmentsForPlan(planId: number, filters?: Pagination, options?: Signal): Promise<AttachmentForPlan[]>;
    getAttachmentsForPlanEntry(planId: number, entryId: string, options?: Signal): Promise<AttachmentForPlanEntry[]>;
    getAttachmentsForRun(runId: number, filters?: Pagination, options?: Signal): Promise<AttachmentForRun[]>;
    getAttachmentsForTest(testId: number, options?: Signal): Promise<AttachmentForTest[]>;
    getAttachment(attachmentId: string, options?: Signal): Promise<Blob>;
    deleteAttachment(attachmentId: string, options?: Signal): Promise<void>;
    getBdd(caseId: number, options?: Signal): Promise<Blob>;
    addBdd(sectionId: number, payload: AddAttachment, options?: Signal): Promise<Case>;
    getCase(caseId: number, options?: Signal): Promise<Case>;
    getCases(projectId: number, filters?: CaseFilters, options?: Signal): Promise<Case[]>;
    getHistoryForCase(caseId: number, filters?: Pagination, options?: Signal): Promise<CaseHistory[]>;
    addCase(sectionId: number, payload: AddCase, options?: Signal): Promise<Case>;
    copyCasesToSection(sectionId: number, payload: CopyCasesToSection, options?: Signal): Promise<void>;
    updateCase(caseId: number, payload: UpdateCase, options?: Signal): Promise<Case>;
    updateCases(suiteId: number, payload: UpdateCases, options?: Signal): Promise<void>;
    moveCasesToSection(sectionId: number, payload: MoveCasesToSection, options?: Signal): Promise<void>;
    deleteCase(caseId: number, options?: Signal): Promise<void>;
    deleteCases(suiteId: number, payload: DeleteCases, options?: Signal): Promise<void>;
    getCaseFields(options?: Signal): Promise<CaseField[]>;
    addCaseField(payload: AddCaseField, options?: Signal): Promise<CaseField>;
    getCaseTypes(options?: Signal): Promise<CaseType[]>;
    getConfigs(projectId: number, options?: Signal): Promise<Config[]>;
    addConfigGroup(projectId: number, payload: AddConfigGroup, options?: Signal): Promise<Config>;
    addConfig(configGroupId: number, payload: AddConfig, options?: Signal): Promise<ConfigItem>;
    updateConfigGroup(configGroupId: number, payload: UpdateConfigGroup, options?: Signal): Promise<Config>;
    updateConfig(configId: number, payload: UpdateConfig, options?: Signal): Promise<ConfigItem>;
    deleteConfigGroup(configGroupId: number, options?: Signal): Promise<void>;
    deleteConfig(configId: number, options?: Signal): Promise<void>;
    getDataset(datasetId: number, options?: Signal): Promise<Dataset>;
    getDatasets(projectId: number, filters?: Pagination, options?: Signal): Promise<Dataset[]>;
    addDataset(projectId: number, payload: AddDataset, options?: Signal): Promise<Group>;
    updateDataset(datasetId: number, payload: AddDataset, options?: Signal): Promise<Group>;
    deleteDataset(datasetId: number, options?: Signal): Promise<void>;
    getGroup(groupId: number, options?: Signal): Promise<Group>;
    getGroups(filters?: Pagination, options?: Signal): Promise<Group[]>;
    addGroup(payload: AddGroup, options?: Signal): Promise<Group>;
    updateGroup(groupId: number, payload: AddGroup, options?: Signal): Promise<Group>;
    deleteGroup(groupId: number, options?: Signal): Promise<void>;
    getMilestone(milestoneId: number, options?: Signal): Promise<Milestone>;
    getMilestones(projectId: number, filters?: MilestoneFilters, options?: Signal): Promise<Milestone[]>;
    addMilestone(projectId: number, payload: AddMilestone, options?: Signal): Promise<Milestone>;
    updateMilestone(milestoneId: number, payload: UpdateMilestone, options?: Signal): Promise<Milestone>;
    deleteMilestone(milestoneId: number, options?: Signal): Promise<void>;
    getPlan(planId: number, options?: Signal): Promise<Plan>;
    getPlans(projectId: number, filters?: PlanFilters, options?: Signal): Promise<PlanItem[]>;
    addPlan(projectId: number, payload: AddPlan, options?: Signal): Promise<Plan>;
    addPlanEntry(planId: number, payload: AddPlanEntry, options?: Signal): Promise<PlanEntry>;
    addRunToPlanEntry(planId: number, entryId: string, payload: AddRunToPlanEntry, options?: Signal): Promise<PlanEntry>;
    updatePlan(planId: number, payload: UpdatePlan, options?: Signal): Promise<Plan>;
    updatePlanEntry(planId: number, entryId: string, payload: UpdatePlanEntry, options?: Signal): Promise<PlanEntry>;
    updateRunInPlanEntry(runId: number, payload: UpdateRunInPlanEntry, options?: Signal): Promise<PlanEntry>;
    closePlan(planId: number, options?: Signal): Promise<Plan>;
    deletePlan(planId: number, options?: Signal): Promise<void>;
    deletePlanEntry(planId: number, entryId: string, options?: Signal): Promise<void>;
    deleteRunFromPlanEntry(runId: number, options?: Signal): Promise<void>;
    getPriorities(options?: Signal): Promise<Priority[]>;
    getProject(projectId: number, options?: Signal): Promise<Project>;
    getProjects(filters?: ProjectFilters, options?: Signal): Promise<Project[]>;
    addProject(payload: AddProject, options?: Signal): Promise<Project>;
    updateProject(projectId: number, payload: UpdateProject, options?: Signal): Promise<Project>;
    deleteProject(projectId: number, options?: Signal): Promise<void>;
    getReports(projectId: number, options?: Signal): Promise<Report[]>;
    runReport(reportTemplateId: number, options?: Signal): Promise<ReportUrls>;
    getResults(testId: number, filters?: ResultFilters, options?: Signal): Promise<Result[]>;
    getResultsForCase(runId: number, caseId: number, filters?: ResultFilters, options?: Signal): Promise<Result[]>;
    getResultsForRun(runId: number, filters?: ResultForRunFilters, options?: Signal): Promise<Result[]>;
    addResult(testId: number, payload: AddResult, options?: Signal): Promise<Result>;
    addResultForCase(runId: number, caseId: number, payload: AddResult, options?: Signal): Promise<Result>;
    addResults(runId: number, payload: AddResults, options?: Signal): Promise<Result[]>;
    addResultsForCases(runId: number, payload: AddResultsForCases, options?: Signal): Promise<Result[]>;
    getResultFields(options?: Signal): Promise<ResultField[]>;
    getRoles(filters?: Pagination, options?: Signal): Promise<Role[]>;
    getRun(runId: number, options?: Signal): Promise<Run>;
    getRuns(projectId: number, filters?: RunFilters, options?: Signal): Promise<Run[]>;
    addRun(projectId: number, payload: AddRun, options?: Signal): Promise<Run>;
    updateRun(runId: number, payload: UpdateRun, options?: Signal): Promise<Run>;
    closeRun(runId: number, options?: Signal): Promise<Run>;
    deleteRun(runId: number, options?: Signal): Promise<void>;
    getSection(sectionId: number, options?: Signal): Promise<Section>;
    getSections(projectId: number, filters?: SectionFilters, options?: Signal): Promise<Section[]>;
    addSection(projectId: number, payload: AddSection, options?: Signal): Promise<Section>;
    moveSection(sectionId: number, payload: MoveSection, options?: Signal): Promise<Section>;
    updateSection(sectionId: number, payload: UpdateSection, options?: Signal): Promise<Section>;
    deleteSection(sectionId: number, options?: Signal): Promise<void>;
    getSharedStep(stepId: number, options?: Signal): Promise<SharedStep>;
    getSharedSteps(projectId: number, filters?: SharedStepFilters, options?: Signal): Promise<SharedStep[]>;
    getSharedStepHistory(stepId: number, filters?: Pagination, options?: Signal): Promise<SharedStepHistory[]>;
    addSharedStep(projectId: number, payload: AddSharedStep, options?: Signal): Promise<SharedStep>;
    updateSharedStep(stepId: number, payload: UpdateSharedStep, options?: Signal): Promise<SharedStep>;
    deleteSharedStep(stepId: number, payload?: DeleteSharedStep, options?: Signal): Promise<void>;
    getStatuses(options?: Signal): Promise<Status[]>;
    getCaseStatuses(filters?: Pagination, options?: Signal): Promise<CaseStatus[]>;
    getSuite(suiteId: number, options?: Signal): Promise<Suite>;
    getSuites(projectId: number, options?: Signal): Promise<Suite[]>;
    addSuite(projectId: number, payload: AddSuite, options?: Signal): Promise<Suite>;
    updateSuite(suiteId: number, payload: UpdateSuite, options?: Signal): Promise<Suite>;
    deleteSuite(suiteId: number, options?: Signal): Promise<void>;
    getTemplates(projectId: number, options?: Signal): Promise<Template[]>;
    getTest(testId: number, options?: Signal): Promise<Test>;
    getTests(runId: number, filters?: TestFilters, options?: Signal): Promise<Test[]>;
    getUser(userId: number, options?: Signal): Promise<User>;
    getCurrentUser(options?: Signal): Promise<User>;
    getUserByEmail(email: string, options?: Signal): Promise<User>;
    getUsers(filters?: UserFilters, options?: Signal): Promise<User[]>;
    addUser(payload: AddUser, options?: Signal): Promise<User>;
    updateUser(userId: number, payload: AddUser, options?: Signal): Promise<User>;
    getVariables(projectId: number, filters?: Pagination, options?: Signal): Promise<Variable[]>;
    addVariable(projectId: number, payload: AddVariable, options?: Signal): Promise<Variable>;
    updateVariable(variableId: number, payload: AddVariable, options?: Signal): Promise<Variable>;
    deleteVariable(variableId: number, options?: Signal): Promise<void>;
    private withCtx;
}

export { AddAttachment, AddCase, AddCaseField, AddConfig, AddConfigGroup, AddDataset, AddGroup, AddMilestone, AddPlan, AddPlanEntry, AddProject, AddResult, AddResultForCase, AddResultForTest, AddResults, AddResultsForCases, AddRun, AddRunToPlanEntry, AddSection, AddSharedStep, AddSuite, AddUser, AddVariable, Attachment, AttachmentForCase, AttachmentForPlan, AttachmentForPlanEntry, AttachmentForRun, AttachmentForTest, Case, CaseField, CaseFilters, CaseHistory, CaseStatus, CaseType, Config, ConfigItem, Context, CopyCasesToSection, CreatedAttachment, Dataset, DeleteCases, DeleteSharedStep, FieldConfig, Group, Milestone, MilestoneFilters, index as Model, MoveCasesToSection, MoveSection, Option, Pagination, index$1 as Payload, Plan, PlanEntry, PlanEntryRun, PlanFilters, PlanItem, Priority, Project, ProjectFilters, Report, ReportUrls, index$1 as Request, index as Response, Result, ResultField, ResultFilters, ResultForRunFilters, Role, Run, RunFilters, Section, SectionFilters, SharedStep, SharedStepFilters, SharedStepHistory, Status, Suite, Template, Test, TestFilters, UpdateCase, UpdateCases, UpdateConfig, UpdateConfigGroup, UpdateMilestone, UpdatePlan, UpdatePlanEntry, UpdateProject, UpdateRun, UpdateRunInPlanEntry, UpdateSection, UpdateSharedStep, UpdateSuite, User, UserFilters, Variable, TestRail as default };

// @ts-ignore
export = TestRail;
